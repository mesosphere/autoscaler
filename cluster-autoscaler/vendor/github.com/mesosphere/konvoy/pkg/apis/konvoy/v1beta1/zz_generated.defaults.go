// +build !ignore_autogenerated

/*
 * Copyright 2020 Mesosphere, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by defaulter-gen. DO NOT EDIT.

package v1beta1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RegisterDefaults adds defaulters functions to the given scheme.
// Public to allow building arbitrary schemes.
// All generated defaulters are covering - they call all nested defaulters.
func RegisterDefaults(scheme *runtime.Scheme) error {
	scheme.AddTypeDefaultingFunc(&ClusterConfiguration{}, func(obj interface{}) { SetObjectDefaults_ClusterConfiguration(obj.(*ClusterConfiguration)) })
	scheme.AddTypeDefaultingFunc(&ClusterProvisioner{}, func(obj interface{}) { SetObjectDefaults_ClusterProvisioner(obj.(*ClusterProvisioner)) })
	return nil
}

func SetObjectDefaults_ClusterConfiguration(in *ClusterConfiguration) {
	SetDefaults_ClusterConfigurationSpec(&in.Spec)
	if in.Spec.Kubernetes != nil {
		SetDefaults_Kubernetes(in.Spec.Kubernetes)
		if in.Spec.Kubernetes.Networking != nil {
			SetDefaults_Networking(in.Spec.Kubernetes.Networking)
		}
		if in.Spec.Kubernetes.CloudProvider != nil {
			SetDefaults_CloudProvider(in.Spec.Kubernetes.CloudProvider)
		}
		if in.Spec.Kubernetes.AdmissionPlugins != nil {
			SetDefaults_AdmissionPlugins(in.Spec.Kubernetes.AdmissionPlugins)
		}
	}
	if in.Spec.ContainerNetworking != nil {
		SetDefaults_ContainerNetworking(in.Spec.ContainerNetworking)
		if in.Spec.ContainerNetworking.Calico != nil {
			SetDefaults_CalicoContainerNetworking(in.Spec.ContainerNetworking.Calico)
		}
	}
	if in.Spec.ContainerRuntime != nil {
		SetDefaults_ContainerRuntime(in.Spec.ContainerRuntime)
		if in.Spec.ContainerRuntime.Containerd != nil {
			SetDefaults_ContainerdContainerRuntime(in.Spec.ContainerRuntime.Containerd)
		}
	}
}

func SetObjectDefaults_ClusterProvisioner(in *ClusterProvisioner) {
	SetDefaults_ClusterProvisionerSpec(&in.Spec)
}
